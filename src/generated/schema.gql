"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Cart`."""
  allCarts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cart`."""
    orderBy: [CartsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CartCondition
  ): CartsConnection

  """Reads and enables pagination through a set of `Customer`."""
  allCustomers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CustomerCondition
  ): CustomersConnection

  """Reads and enables pagination through a set of `Order`."""
  allOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderCondition
  ): OrdersConnection

  """Reads and enables pagination through a set of `OrderItem`."""
  allOrderItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderItemCondition
  ): OrderItemsConnection

  """Reads and enables pagination through a set of `Payment`."""
  allPayments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection

  """Reads and enables pagination through a set of `Product`."""
  allProducts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection

  """Reads and enables pagination through a set of `Supplier`."""
  allSuppliers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Supplier`."""
    orderBy: [SuppliersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SupplierCondition
  ): SuppliersConnection
  cartById(id: Int!): Cart
  customerById(id: Int!): Customer
  customerByPrimaryNumber(primaryNumber: Int!): Customer
  orderById(id: Int!): Order
  orderItemById(id: Int!): OrderItem
  paymentById(id: Int!): Payment
  paymentByOrderId(orderId: Int!): Payment
  productById(id: Int!): Product
  supplierById(id: Int!): Supplier

  """Reads a single `Cart` using its globally unique `ID`."""
  cart(
    """The globally unique `ID` to be used in selecting a single `Cart`."""
    nodeId: ID!
  ): Cart

  """Reads a single `Customer` using its globally unique `ID`."""
  customer(
    """The globally unique `ID` to be used in selecting a single `Customer`."""
    nodeId: ID!
  ): Customer

  """Reads a single `Order` using its globally unique `ID`."""
  order(
    """The globally unique `ID` to be used in selecting a single `Order`."""
    nodeId: ID!
  ): Order

  """Reads a single `OrderItem` using its globally unique `ID`."""
  orderItem(
    """The globally unique `ID` to be used in selecting a single `OrderItem`."""
    nodeId: ID!
  ): OrderItem

  """Reads a single `Payment` using its globally unique `ID`."""
  payment(
    """The globally unique `ID` to be used in selecting a single `Payment`."""
    nodeId: ID!
  ): Payment

  """Reads a single `Product` using its globally unique `ID`."""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    nodeId: ID!
  ): Product

  """Reads a single `Supplier` using its globally unique `ID`."""
  supplier(
    """The globally unique `ID` to be used in selecting a single `Supplier`."""
    nodeId: ID!
  ): Supplier
  customerGet(input: customerInput!): [Customer!]
  getOrderDetails(input: getOrderInput!): [Order]
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Cart` values."""
type CartsConnection {
  """A list of `Cart` objects."""
  nodes: [Cart]!

  """
  A list of edges which contains the `Cart` and cursor to aid in pagination.
  """
  edges: [CartsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cart` you could get from the connection."""
  totalCount: Int!
}

type Cart implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  quantity: Int!
  customerId: Int
  productId: Int

  """Reads a single `Customer` that is related to this `Cart`."""
  customerByCustomerId: Customer

  """Reads a single `Product` that is related to this `Cart`."""
  productByProductId: Product
}

type Customer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  firstName: String!
  lastName: String
  city: String
  password: String!
  country: String
  primaryNumber: Int!

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByCustomerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection!

  """Reads and enables pagination through a set of `Cart`."""
  cartsByCustomerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cart`."""
    orderBy: [CartsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CartCondition
  ): CartsConnection!

  """Reads and enables pagination through a set of `Order`."""
  ordersByCustomerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderCondition
  ): OrdersConnection!
}

"""A connection to a list of `Payment` values."""
type PaymentsConnection {
  """A list of `Payment` objects."""
  nodes: [Payment]!

  """
  A list of edges which contains the `Payment` and cursor to aid in pagination.
  """
  edges: [PaymentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Payment` you could get from the connection."""
  totalCount: Int!
}

type Payment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  paymentType: String!
  isPaymentActive: Boolean!
  paymentAmount: Int!
  paymentDate: Datetime!
  customerId: Int
  orderId: Int

  """Reads a single `Customer` that is related to this `Payment`."""
  customerByCustomerId: Customer

  """Reads a single `Order` that is related to this `Payment`."""
  orderByOrderId: Order
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Order implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  orderDate: Datetime
  totalAmount: Int
  isActive: Boolean
  customerId: Int

  """Reads a single `Customer` that is related to this `Order`."""
  customerByCustomerId: Customer

  """Reads a single `Payment` that is related to this `Order`."""
  paymentByOrderId: Payment

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByOrderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection! @deprecated(reason: "Please use paymentByOrderId instead")

  """Reads and enables pagination through a set of `OrderItem`."""
  orderItemsByOrderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderItemCondition
  ): OrderItemsConnection!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `Payment`."""
enum PaymentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PAYMENT_TYPE_ASC
  PAYMENT_TYPE_DESC
  IS_PAYMENT_ACTIVE_ASC
  IS_PAYMENT_ACTIVE_DESC
  PAYMENT_AMOUNT_ASC
  PAYMENT_AMOUNT_DESC
  PAYMENT_DATE_ASC
  PAYMENT_DATE_DESC
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  ORDER_ID_ASC
  ORDER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Payment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PaymentCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `paymentType` field."""
  paymentType: String

  """Checks for equality with the object’s `isPaymentActive` field."""
  isPaymentActive: Boolean

  """Checks for equality with the object’s `paymentAmount` field."""
  paymentAmount: Int

  """Checks for equality with the object’s `paymentDate` field."""
  paymentDate: Datetime

  """Checks for equality with the object’s `customerId` field."""
  customerId: Int

  """Checks for equality with the object’s `orderId` field."""
  orderId: Int
}

"""A connection to a list of `OrderItem` values."""
type OrderItemsConnection {
  """A list of `OrderItem` objects."""
  nodes: [OrderItem]!

  """
  A list of edges which contains the `OrderItem` and cursor to aid in pagination.
  """
  edges: [OrderItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OrderItem` you could get from the connection."""
  totalCount: Int!
}

type OrderItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  unitPrice: Int!
  quantity: Int!
  orderId: Int
  productId: Int

  """Reads a single `Order` that is related to this `OrderItem`."""
  orderByOrderId: Order

  """Reads a single `Product` that is related to this `OrderItem`."""
  productByProductId: Product
}

type Product implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  productName: String!
  unitPrice: Int!
  package: String!
  isDiscontinued: Boolean!
  availableQuantitiy: Int

  """Reads and enables pagination through a set of `Supplier`."""
  suppliersByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Supplier`."""
    orderBy: [SuppliersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SupplierCondition
  ): SuppliersConnection!

  """Reads and enables pagination through a set of `Cart`."""
  cartsByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cart`."""
    orderBy: [CartsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CartCondition
  ): CartsConnection!

  """Reads and enables pagination through a set of `OrderItem`."""
  orderItemsByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderItemCondition
  ): OrderItemsConnection!
}

"""A connection to a list of `Supplier` values."""
type SuppliersConnection {
  """A list of `Supplier` objects."""
  nodes: [Supplier]!

  """
  A list of edges which contains the `Supplier` and cursor to aid in pagination.
  """
  edges: [SuppliersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Supplier` you could get from the connection."""
  totalCount: Int!
}

type Supplier implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  companyName: String!
  contactName: String!
  city: String!
  country: String!
  pincode: Int!
  fax: String!
  productId: Int

  """Reads a single `Product` that is related to this `Supplier`."""
  productByProductId: Product
}

"""A `Supplier` edge in the connection."""
type SuppliersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Supplier` at the end of the edge."""
  node: Supplier
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Supplier`."""
enum SuppliersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COMPANY_NAME_ASC
  COMPANY_NAME_DESC
  CONTACT_NAME_ASC
  CONTACT_NAME_DESC
  CITY_ASC
  CITY_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  PINCODE_ASC
  PINCODE_DESC
  FAX_ASC
  FAX_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Supplier` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SupplierCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `companyName` field."""
  companyName: String

  """Checks for equality with the object’s `contactName` field."""
  contactName: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `pincode` field."""
  pincode: Int

  """Checks for equality with the object’s `fax` field."""
  fax: String

  """Checks for equality with the object’s `productId` field."""
  productId: Int
}

"""Methods to use when ordering `Cart`."""
enum CartsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Cart` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CartCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int

  """Checks for equality with the object’s `customerId` field."""
  customerId: Int

  """Checks for equality with the object’s `productId` field."""
  productId: Int
}

"""Methods to use when ordering `OrderItem`."""
enum OrderItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UNIT_PRICE_ASC
  UNIT_PRICE_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  ORDER_ID_ASC
  ORDER_ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `OrderItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OrderItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `unitPrice` field."""
  unitPrice: Int

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int

  """Checks for equality with the object’s `orderId` field."""
  orderId: Int

  """Checks for equality with the object’s `productId` field."""
  productId: Int
}

"""A `OrderItem` edge in the connection."""
type OrderItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrderItem` at the end of the edge."""
  node: OrderItem
}

"""A `Payment` edge in the connection."""
type PaymentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Payment` at the end of the edge."""
  node: Payment
}

"""A connection to a list of `Order` values."""
type OrdersConnection {
  """A list of `Order` objects."""
  nodes: [Order]!

  """
  A list of edges which contains the `Order` and cursor to aid in pagination.
  """
  edges: [OrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Order` you could get from the connection."""
  totalCount: Int!
}

"""A `Order` edge in the connection."""
type OrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Order` at the end of the edge."""
  node: Order
}

"""Methods to use when ordering `Order`."""
enum OrdersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORDER_DATE_ASC
  ORDER_DATE_DESC
  TOTAL_AMOUNT_ASC
  TOTAL_AMOUNT_DESC
  IS_ACTIVE_ASC
  IS_ACTIVE_DESC
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Order` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input OrderCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `orderDate` field."""
  orderDate: Datetime

  """Checks for equality with the object’s `totalAmount` field."""
  totalAmount: Int

  """Checks for equality with the object’s `isActive` field."""
  isActive: Boolean

  """Checks for equality with the object’s `customerId` field."""
  customerId: Int
}

"""A `Cart` edge in the connection."""
type CartsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cart` at the end of the edge."""
  node: Cart
}

"""A connection to a list of `Customer` values."""
type CustomersConnection {
  """A list of `Customer` objects."""
  nodes: [Customer]!

  """
  A list of edges which contains the `Customer` and cursor to aid in pagination.
  """
  edges: [CustomersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Customer` you could get from the connection."""
  totalCount: Int!
}

"""A `Customer` edge in the connection."""
type CustomersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Customer` at the end of the edge."""
  node: Customer
}

"""Methods to use when ordering `Customer`."""
enum CustomersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  CITY_ASC
  CITY_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  PRIMARY_NUMBER_ASC
  PRIMARY_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Customer` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CustomerCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `password` field."""
  password: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `primaryNumber` field."""
  primaryNumber: Int
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """A list of `Product` objects."""
  nodes: [Product]!

  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRODUCT_NAME_ASC
  PRODUCT_NAME_DESC
  UNIT_PRICE_ASC
  UNIT_PRICE_DESC
  PACKAGE_ASC
  PACKAGE_DESC
  IS_DISCONTINUED_ASC
  IS_DISCONTINUED_DESC
  AVAILABLE_QUANTITIY_ASC
  AVAILABLE_QUANTITIY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `productName` field."""
  productName: String

  """Checks for equality with the object’s `unitPrice` field."""
  unitPrice: Int

  """Checks for equality with the object’s `package` field."""
  package: String

  """Checks for equality with the object’s `isDiscontinued` field."""
  isDiscontinued: Boolean

  """Checks for equality with the object’s `availableQuantitiy` field."""
  availableQuantitiy: Int
}

input customerInput {
  id: Int
}

input getOrderInput {
  primaryNumber: Int!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Cart`."""
  createCart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCartInput!
  ): CreateCartPayload

  """Creates a single `Customer`."""
  createCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCustomerInput!
  ): CreateCustomerPayload

  """Creates a single `Order`."""
  createOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrderInput!
  ): CreateOrderPayload

  """Creates a single `OrderItem`."""
  createOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrderItemInput!
  ): CreateOrderItemPayload

  """Creates a single `Payment`."""
  createPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePaymentInput!
  ): CreatePaymentPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Creates a single `Supplier`."""
  createSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSupplierInput!
  ): CreateSupplierPayload

  """Updates a single `Cart` using its globally unique id and a patch."""
  updateCart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCartInput!
  ): UpdateCartPayload

  """Updates a single `Cart` using a unique key and a patch."""
  updateCartById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCartByIdInput!
  ): UpdateCartPayload

  """Updates a single `Customer` using its globally unique id and a patch."""
  updateCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCustomerInput!
  ): UpdateCustomerPayload

  """Updates a single `Customer` using a unique key and a patch."""
  updateCustomerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCustomerByIdInput!
  ): UpdateCustomerPayload

  """Updates a single `Customer` using a unique key and a patch."""
  updateCustomerByPrimaryNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCustomerByPrimaryNumberInput!
  ): UpdateCustomerPayload

  """Updates a single `Order` using its globally unique id and a patch."""
  updateOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderInput!
  ): UpdateOrderPayload

  """Updates a single `Order` using a unique key and a patch."""
  updateOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderByIdInput!
  ): UpdateOrderPayload

  """Updates a single `OrderItem` using its globally unique id and a patch."""
  updateOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderItemInput!
  ): UpdateOrderItemPayload

  """Updates a single `OrderItem` using a unique key and a patch."""
  updateOrderItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderItemByIdInput!
  ): UpdateOrderItemPayload

  """Updates a single `Payment` using its globally unique id and a patch."""
  updatePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePaymentInput!
  ): UpdatePaymentPayload

  """Updates a single `Payment` using a unique key and a patch."""
  updatePaymentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePaymentByIdInput!
  ): UpdatePaymentPayload

  """Updates a single `Payment` using a unique key and a patch."""
  updatePaymentByOrderId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePaymentByOrderIdInput!
  ): UpdatePaymentPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByIdInput!
  ): UpdateProductPayload

  """Updates a single `Supplier` using its globally unique id and a patch."""
  updateSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSupplierInput!
  ): UpdateSupplierPayload

  """Updates a single `Supplier` using a unique key and a patch."""
  updateSupplierById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSupplierByIdInput!
  ): UpdateSupplierPayload

  """Deletes a single `Cart` using its globally unique id."""
  deleteCart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCartInput!
  ): DeleteCartPayload

  """Deletes a single `Cart` using a unique key."""
  deleteCartById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCartByIdInput!
  ): DeleteCartPayload

  """Deletes a single `Customer` using its globally unique id."""
  deleteCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCustomerInput!
  ): DeleteCustomerPayload

  """Deletes a single `Customer` using a unique key."""
  deleteCustomerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCustomerByIdInput!
  ): DeleteCustomerPayload

  """Deletes a single `Customer` using a unique key."""
  deleteCustomerByPrimaryNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCustomerByPrimaryNumberInput!
  ): DeleteCustomerPayload

  """Deletes a single `Order` using its globally unique id."""
  deleteOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderInput!
  ): DeleteOrderPayload

  """Deletes a single `Order` using a unique key."""
  deleteOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderByIdInput!
  ): DeleteOrderPayload

  """Deletes a single `OrderItem` using its globally unique id."""
  deleteOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderItemInput!
  ): DeleteOrderItemPayload

  """Deletes a single `OrderItem` using a unique key."""
  deleteOrderItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderItemByIdInput!
  ): DeleteOrderItemPayload

  """Deletes a single `Payment` using its globally unique id."""
  deletePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePaymentInput!
  ): DeletePaymentPayload

  """Deletes a single `Payment` using a unique key."""
  deletePaymentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePaymentByIdInput!
  ): DeletePaymentPayload

  """Deletes a single `Payment` using a unique key."""
  deletePaymentByOrderId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePaymentByOrderIdInput!
  ): DeletePaymentPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByIdInput!
  ): DeleteProductPayload

  """Deletes a single `Supplier` using its globally unique id."""
  deleteSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSupplierInput!
  ): DeleteSupplierPayload

  """Deletes a single `Supplier` using a unique key."""
  deleteSupplierById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSupplierByIdInput!
  ): DeleteSupplierPayload
  add_customer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: addCustInput!
  ): Customer
  verifyingUserLogin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: userLoginInput!
  ): userLogin
  update_customer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: updateCustInput!
  ): updateCustomer
  delete_customer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: deleteCustInput!
  ): deleteCustomer
  createNewOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: createOrderInput!
  ): createOrder
  makePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: paymentInput!
  ): paymentOutput
  singleItemOrderFromCart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: singleItemOrderInput
  ): singleItemOrderOutput
  allItemsOrderFromCart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: allItemsOrderInput
  ): allItemsOrderOutput
}

"""The output of our create `Cart` mutation."""
type CreateCartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cart` that was created by this mutation."""
  cart: Cart

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Cart`."""
  customerByCustomerId: Customer

  """Reads a single `Product` that is related to this `Cart`."""
  productByProductId: Product

  """An edge for our `Cart`. May be used by Relay 1."""
  cartEdge(
    """The method to use when ordering `Cart`."""
    orderBy: [CartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CartsEdge
}

"""All input for the create `Cart` mutation."""
input CreateCartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Cart` to be created by this mutation."""
  cart: CartInput!
}

"""An input for mutations affecting `Cart`"""
input CartInput {
  id: Int
  quantity: Int!
  customerId: Int
  productId: Int
}

"""The output of our create `Customer` mutation."""
type CreateCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Customer` that was created by this mutation."""
  customer: Customer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Customer`. May be used by Relay 1."""
  customerEdge(
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CustomersEdge
}

"""All input for the create `Customer` mutation."""
input CreateCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Customer` to be created by this mutation."""
  customer: CustomerInput!
}

"""An input for mutations affecting `Customer`"""
input CustomerInput {
  id: Int
  firstName: String!
  lastName: String
  city: String
  password: String!
  country: String
  primaryNumber: Int!
}

"""The output of our create `Order` mutation."""
type CreateOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was created by this mutation."""
  order: Order

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Order`."""
  customerByCustomerId: Customer

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}

"""All input for the create `Order` mutation."""
input CreateOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Order` to be created by this mutation."""
  order: OrderInput!
}

"""An input for mutations affecting `Order`"""
input OrderInput {
  id: Int
  orderDate: Datetime
  totalAmount: Int
  isActive: Boolean
  customerId: Int
}

"""The output of our create `OrderItem` mutation."""
type CreateOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was created by this mutation."""
  orderItem: OrderItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `OrderItem`."""
  orderByOrderId: Order

  """Reads a single `Product` that is related to this `OrderItem`."""
  productByProductId: Product

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the create `OrderItem` mutation."""
input CreateOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrderItem` to be created by this mutation."""
  orderItem: OrderItemInput!
}

"""An input for mutations affecting `OrderItem`"""
input OrderItemInput {
  id: Int
  unitPrice: Int!
  quantity: Int!
  orderId: Int
  productId: Int
}

"""The output of our create `Payment` mutation."""
type CreatePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Payment` that was created by this mutation."""
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Payment`."""
  customerByCustomerId: Customer

  """Reads a single `Order` that is related to this `Payment`."""
  orderByOrderId: Order

  """An edge for our `Payment`. May be used by Relay 1."""
  paymentEdge(
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""All input for the create `Payment` mutation."""
input CreatePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Payment` to be created by this mutation."""
  payment: PaymentInput!
}

"""An input for mutations affecting `Payment`"""
input PaymentInput {
  id: Int
  paymentType: String!
  isPaymentActive: Boolean!
  paymentAmount: Int!
  paymentDate: Datetime!
  customerId: Int
  orderId: Int
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  id: Int
  productName: String!
  unitPrice: Int!
  package: String!
  isDiscontinued: Boolean!
  availableQuantitiy: Int
}

"""The output of our create `Supplier` mutation."""
type CreateSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Supplier` that was created by this mutation."""
  supplier: Supplier

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Supplier`."""
  productByProductId: Product

  """An edge for our `Supplier`. May be used by Relay 1."""
  supplierEdge(
    """The method to use when ordering `Supplier`."""
    orderBy: [SuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuppliersEdge
}

"""All input for the create `Supplier` mutation."""
input CreateSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Supplier` to be created by this mutation."""
  supplier: SupplierInput!
}

"""An input for mutations affecting `Supplier`"""
input SupplierInput {
  id: Int
  companyName: String!
  contactName: String!
  city: String!
  country: String!
  pincode: Int!
  fax: String!
  productId: Int
}

"""The output of our update `Cart` mutation."""
type UpdateCartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cart` that was updated by this mutation."""
  cart: Cart

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Cart`."""
  customerByCustomerId: Customer

  """Reads a single `Product` that is related to this `Cart`."""
  productByProductId: Product

  """An edge for our `Cart`. May be used by Relay 1."""
  cartEdge(
    """The method to use when ordering `Cart`."""
    orderBy: [CartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CartsEdge
}

"""All input for the `updateCart` mutation."""
input UpdateCartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Cart` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Cart` being updated.
  """
  cartPatch: CartPatch!
}

"""Represents an update to a `Cart`. Fields that are set will be updated."""
input CartPatch {
  id: Int
  quantity: Int
  customerId: Int
  productId: Int
}

"""All input for the `updateCartById` mutation."""
input UpdateCartByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Cart` being updated.
  """
  cartPatch: CartPatch!
  id: Int!
}

"""The output of our update `Customer` mutation."""
type UpdateCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Customer` that was updated by this mutation."""
  customer: Customer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Customer`. May be used by Relay 1."""
  customerEdge(
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CustomersEdge
}

"""All input for the `updateCustomer` mutation."""
input UpdateCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Customer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Customer` being updated.
  """
  customerPatch: CustomerPatch!
}

"""
Represents an update to a `Customer`. Fields that are set will be updated.
"""
input CustomerPatch {
  id: Int
  firstName: String
  lastName: String
  city: String
  password: String
  country: String
  primaryNumber: Int
}

"""All input for the `updateCustomerById` mutation."""
input UpdateCustomerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Customer` being updated.
  """
  customerPatch: CustomerPatch!
  id: Int!
}

"""All input for the `updateCustomerByPrimaryNumber` mutation."""
input UpdateCustomerByPrimaryNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Customer` being updated.
  """
  customerPatch: CustomerPatch!
  primaryNumber: Int!
}

"""The output of our update `Order` mutation."""
type UpdateOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was updated by this mutation."""
  order: Order

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Order`."""
  customerByCustomerId: Customer

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}

"""All input for the `updateOrder` mutation."""
input UpdateOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Order` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Order` being updated.
  """
  orderPatch: OrderPatch!
}

"""
Represents an update to a `Order`. Fields that are set will be updated.
"""
input OrderPatch {
  id: Int
  orderDate: Datetime
  totalAmount: Int
  isActive: Boolean
  customerId: Int
}

"""All input for the `updateOrderById` mutation."""
input UpdateOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Order` being updated.
  """
  orderPatch: OrderPatch!
  id: Int!
}

"""The output of our update `OrderItem` mutation."""
type UpdateOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was updated by this mutation."""
  orderItem: OrderItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `OrderItem`."""
  orderByOrderId: Order

  """Reads a single `Product` that is related to this `OrderItem`."""
  productByProductId: Product

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the `updateOrderItem` mutation."""
input UpdateOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrderItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrderItem` being updated.
  """
  orderItemPatch: OrderItemPatch!
}

"""
Represents an update to a `OrderItem`. Fields that are set will be updated.
"""
input OrderItemPatch {
  id: Int
  unitPrice: Int
  quantity: Int
  orderId: Int
  productId: Int
}

"""All input for the `updateOrderItemById` mutation."""
input UpdateOrderItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrderItem` being updated.
  """
  orderItemPatch: OrderItemPatch!
  id: Int!
}

"""The output of our update `Payment` mutation."""
type UpdatePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Payment` that was updated by this mutation."""
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Payment`."""
  customerByCustomerId: Customer

  """Reads a single `Order` that is related to this `Payment`."""
  orderByOrderId: Order

  """An edge for our `Payment`. May be used by Relay 1."""
  paymentEdge(
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""All input for the `updatePayment` mutation."""
input UpdatePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Payment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Payment` being updated.
  """
  paymentPatch: PaymentPatch!
}

"""
Represents an update to a `Payment`. Fields that are set will be updated.
"""
input PaymentPatch {
  id: Int
  paymentType: String
  isPaymentActive: Boolean
  paymentAmount: Int
  paymentDate: Datetime
  customerId: Int
  orderId: Int
}

"""All input for the `updatePaymentById` mutation."""
input UpdatePaymentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Payment` being updated.
  """
  paymentPatch: PaymentPatch!
  id: Int!
}

"""All input for the `updatePaymentByOrderId` mutation."""
input UpdatePaymentByOrderIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Payment` being updated.
  """
  paymentPatch: PaymentPatch!
  orderId: Int!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  id: Int
  productName: String
  unitPrice: Int
  package: String
  isDiscontinued: Boolean
  availableQuantitiy: Int
}

"""All input for the `updateProductById` mutation."""
input UpdateProductByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
  id: Int!
}

"""The output of our update `Supplier` mutation."""
type UpdateSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Supplier` that was updated by this mutation."""
  supplier: Supplier

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Supplier`."""
  productByProductId: Product

  """An edge for our `Supplier`. May be used by Relay 1."""
  supplierEdge(
    """The method to use when ordering `Supplier`."""
    orderBy: [SuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuppliersEdge
}

"""All input for the `updateSupplier` mutation."""
input UpdateSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Supplier` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Supplier` being updated.
  """
  supplierPatch: SupplierPatch!
}

"""
Represents an update to a `Supplier`. Fields that are set will be updated.
"""
input SupplierPatch {
  id: Int
  companyName: String
  contactName: String
  city: String
  country: String
  pincode: Int
  fax: String
  productId: Int
}

"""All input for the `updateSupplierById` mutation."""
input UpdateSupplierByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Supplier` being updated.
  """
  supplierPatch: SupplierPatch!
  id: Int!
}

"""The output of our delete `Cart` mutation."""
type DeleteCartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cart` that was deleted by this mutation."""
  cart: Cart
  deletedCartId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Cart`."""
  customerByCustomerId: Customer

  """Reads a single `Product` that is related to this `Cart`."""
  productByProductId: Product

  """An edge for our `Cart`. May be used by Relay 1."""
  cartEdge(
    """The method to use when ordering `Cart`."""
    orderBy: [CartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CartsEdge
}

"""All input for the `deleteCart` mutation."""
input DeleteCartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Cart` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCartById` mutation."""
input DeleteCartByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Customer` mutation."""
type DeleteCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Customer` that was deleted by this mutation."""
  customer: Customer
  deletedCustomerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Customer`. May be used by Relay 1."""
  customerEdge(
    """The method to use when ordering `Customer`."""
    orderBy: [CustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CustomersEdge
}

"""All input for the `deleteCustomer` mutation."""
input DeleteCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Customer` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCustomerById` mutation."""
input DeleteCustomerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCustomerByPrimaryNumber` mutation."""
input DeleteCustomerByPrimaryNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  primaryNumber: Int!
}

"""The output of our delete `Order` mutation."""
type DeleteOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was deleted by this mutation."""
  order: Order
  deletedOrderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Order`."""
  customerByCustomerId: Customer

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}

"""All input for the `deleteOrder` mutation."""
input DeleteOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Order` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrderById` mutation."""
input DeleteOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `OrderItem` mutation."""
type DeleteOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was deleted by this mutation."""
  orderItem: OrderItem
  deletedOrderItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `OrderItem`."""
  orderByOrderId: Order

  """Reads a single `Product` that is related to this `OrderItem`."""
  productByProductId: Product

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the `deleteOrderItem` mutation."""
input DeleteOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrderItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrderItemById` mutation."""
input DeleteOrderItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Payment` mutation."""
type DeletePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Payment` that was deleted by this mutation."""
  payment: Payment
  deletedPaymentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Customer` that is related to this `Payment`."""
  customerByCustomerId: Customer

  """Reads a single `Order` that is related to this `Payment`."""
  orderByOrderId: Order

  """An edge for our `Payment`. May be used by Relay 1."""
  paymentEdge(
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""All input for the `deletePayment` mutation."""
input DeletePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Payment` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePaymentById` mutation."""
input DeletePaymentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePaymentByOrderId` mutation."""
input DeletePaymentByOrderIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  orderId: Int!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was deleted by this mutation."""
  product: Product
  deletedProductId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProductById` mutation."""
input DeleteProductByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Supplier` mutation."""
type DeleteSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Supplier` that was deleted by this mutation."""
  supplier: Supplier
  deletedSupplierId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Supplier`."""
  productByProductId: Product

  """An edge for our `Supplier`. May be used by Relay 1."""
  supplierEdge(
    """The method to use when ordering `Supplier`."""
    orderBy: [SuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuppliersEdge
}

"""All input for the `deleteSupplier` mutation."""
input DeleteSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Supplier` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSupplierById` mutation."""
input DeleteSupplierByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

input addCustInput {
  firstName: String!
  lastName: String!
  city: String!
  country: String!
  password: String!
  primaryNumber: Int!
}

type userLogin {
  msg: String!
}

input userLoginInput {
  primaryNumber: Int!
  password: String!
}

type updateCustomer {
  firstName: String
  lastName: String
  city: String
  country: String
  phone: Int
  id: Int
}

input updateCustInput {
  id: Int
  firstName: String
  lastName: String
  city: String
  country: String
  phone: Int
}

type deleteCustomer {
  msg: String
}

input deleteCustInput {
  id: Int
}

type createOrder {
  isSuccess: Boolean
  message: String
  name: String
  data: [product]
  errData: [product]
  errMsg: String
  customerId: Int
  ordInfo: order
}

type product {
  productName: String
  package: String
  isDiscontinued: Boolean
  quantity: Int
}

type order {
  orderDate: Date
  totalAmount: Int
  id: Int
}

"""The day, does not include a time."""
scalar Date

input createOrderInput {
  customer: customerDataInput
  product: [productInput]
}

input customerDataInput {
  firstName: String
  lastName: String
  city: String
  country: String
  primaryNumber: Int
}

input productInput {
  productName: String
  package: String
  isDiscontinued: Boolean
  quantity: Int
}

type paymentOutput {
  msg: String
  paymentAmount: Int
  orderId: Int
}

input paymentInput {
  id: Int
}

type singleItemOrderOutput {
  isSuccess: Boolean
  message: String
  name: String
  data: [product]
  errData: [product]
  errMsg: String
  customerId: Int
  ordInfo: order
}

input singleItemOrderInput {
  cartItemId: Int
}

type allItemsOrderOutput {
  isSuccess: Boolean
  message: String
  name: String
  data: [product]
  errData: [product]
  errMsg: String
  customerId: Int
  ordInfo: order
}

input allItemsOrderInput {
  customerId: Int
}
